name: CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Build optimized binary
        run: |
          CGO_ENABLED=0 go build -ldflags="-s -w" -o tw-stash

          file artifact/tw-stash
          if file artifact/tw-stash | grep "dynamically linked" > /dev/null; then
            echo "tw-stash is dynamically linked. This will break the container."
            exit 1
          fi

      - name: Save release
        uses: actions/upload-artifact@v4
        with:
          name: tw-stash
          path: tw-stash

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Build optimized binary
        run: |
          go test

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crate-ci/typos@master

  containerize:
    runs-on: "ubuntu-latest"

    needs: [build, test, lint, typos]

    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.containerize.outputs.tag }}
    env:
      IMAGE_NAME: "ghcr.io/bytes-zone/tw-stash"
      REGISTRY: "ghcr.io"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: tw-stash
          path: artifact

      - id: containerize
        run: |
          TAG="$(sha256sum artifact/tw-stash | cut -f 1 -d ' ')"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          docker build . --tag "${{ env.IMAGE_NAME }}:${TAG}"

          docker run --detach --rm --name tw-stash --publish 8080:8080 "${{ env.IMAGE_NAME }}:${TAG}"

          sleep 1

          curl --fail http://localhost:8080

      - name: Log into the container registry
        uses: docker/login-action@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push
        if: ${{ github.ref == 'refs/heads/main' }}
        run: docker push "${{ env.IMAGE_NAME }}:${{ steps.containerize.outputs.tag }}"
